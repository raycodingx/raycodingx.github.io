<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/01/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very
first post. Check <a href="https://hexo.io/docs/">documentation</a> for
more info. If you get any problems when using Hexo, you can find the
answer in <a
href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or
you can ask me on <a
href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a
href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>创建博客缘由</title>
    <url>/2024/01/27/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BC%98%E7%94%B1/</url>
    <content><![CDATA[<ol type="1">
<li><strong>分享知识和经验：</strong>
博客是一个分享个人专业知识、经验和见解的理想平台。通过博客，你可以把自己在某个领域的学习和工作经验分享给他人，帮助他们学习和成长。</li>
<li><strong>记录个人成长和进步：</strong>
博客可以成为个人成长和进步的记录。通过写作，你可以反思自己的经历、成就和失败，从中学到更多，也能激励自己在未来取得更大的进步。</li>
</ol>
<span id="more"></span>
<ol type="1">
<li><strong>社交网络和建立连接：</strong>
博客是一个与其他人建立连接的有效方式。通过在博客上发表内容，你有机会与同行、同兴趣的人建立联系，扩大你的社交网络。</li>
<li><strong>提高写作和表达能力：</strong>
博客写作是一种提高写作和表达能力的绝佳途径。通过不断练习，你可以改进自己的写作技巧，提高表达思想的能力。</li>
<li><strong>建立个人品牌：</strong>
博客是一个展示个人技能和专业领域知识的平台，有助于建立个人品牌。通过定期发布高质量的内容，你可以在网络上树立良好的声誉，提升个人形象。</li>
<li><strong>创造 pass ive income：</strong>
如果你的博客能够吸引大量读者，你有可能通过广告、赞助或推广产品赚取 pass
ive income，为自己创造额外的收入来源。</li>
<li><strong>践行个人兴趣和爱好：</strong>
博客可以成为一个追求兴趣和爱好的平台。通过写作，你能够深入研究和分享你热爱的主题，与其他对这些主题感兴趣的人建立联系。</li>
<li><strong>展示创意和艺术：</strong>
如果你对创意和艺术有浓厚的兴趣，博客是一个展示个人创作和作品的好地方。你可以分享自己的艺术品、摄影作品、文学创作等。</li>
</ol>
<p>总的来说，创建个人博客可以是一个多方面的动机，取决于个人的兴趣、目标和需求。无论是分享知识、建立个人品牌还是记录成长，博客都是一个灵活而强大的工具。</p>
<p>以上内容为chatGPT3.5
给出的回答，基本梳理出我的绝大部分想法，唯一需要再补充一点的是：</p>
<ol start="7" type="1">
<li><strong>传播利他信念：</strong>利他信念，路途遥远，回首时，熙攘处处。</li>
</ol>
]]></content>
      <tags>
        <tag>闲谈</tag>
      </tags>
  </entry>
  <entry>
    <title>育种之谈（一）</title>
    <url>/2024/03/18/%E8%82%B2%E7%A7%8D%E4%B9%8B%E8%B0%88%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p><strong>在畜牧业和农业生产过程中的育种，大多是指对育种对象数量性状的选择</strong>。进行选择的前提是有一套符合实践经验的选择标准和目标，育种的目标可以是提高作物产量和质量，增加耐逆性和抗病性，改良家畜的生产性能，提高食品的营养价值，或者开发出新的品种以适应不同的环境和市场需求。有了育种目标和方向，再找趁手的“<strong>工具</strong>”，必然在不断的育种实践中收获累累硕果。而这个“<strong>工具</strong>”必然是具备理论基础和可工程化实践。</p>
<h2 id="理论基础">理论基础</h2>
<p><strong>现代数量性状育种的理论基础主要来源于数量遗传学</strong>。数量遗传学是研究性状在种群中遗传变异的科学领域，它提供了一套完整的理论框架和方法论，用于解释和利用性状的遗传基础，并指导育种实践。1918年Ronald
Fisher发表了数量遗传学的经典文献“The Correlation between Relatives on
the Supposition of Mendelian
Inheritance”，确立了沿用至今的统计模型“infinitesimal
model”（微效多基因模型）。其中将phenotypic variance拆分成genotypic
variance和enviromental variance，即： <span class="math display">\[
Var(P) = Var(G+E) = Var(G) + Var(E) + 2Cov(G,E) = Var(G) + Var(E)
\]</span> 更加简洁一点： <span class="math display">\[
P = G + E
\]</span></p>
<h2 id="育种工具发展及现状">育种工具发展及现状</h2>
<p>在BLUP出现之前，育种学家的对于育种对象的遗传改良主要依靠表型外貌选择（经验选择），但表型选择有着比较突出的缺点：其一，<strong>遗传背景不清晰，</strong>表型外貌选择只考虑了外部表现，无法准确估计个体的遗传背景，容易忽略潜在的遗传疾病或不良基因；其二，<strong>潜在的选择偏差，</strong>表型外貌选择容易受到主观因素的影响，例如个体的外貌吸引力、行为特征等，可能导致对某些个体的过度选择或忽视；其三，<strong>遗传进展慢，</strong>由于无法准确估计个体的遗传价值，表型外貌选择可能导致遗传改良进展缓慢，特别是在复杂性状或多基因控制的情况下；其四，<strong>难以适应多性状选择，</strong>表型外貌选择通常只能针对单个性状进行选择，难以有效地应对多性状选择的需求，这可能限制了遗传改良的效率和成果。
### 基于MME模型的育种工具研究基础
有了育种理论基础，于是就有了Henderson在1953年提出了一种基于随机效应模型的最小二乘法，用于估计畜群的遗传值。在接下来的几年里，他的研究中应用了一种称为矩阵代数的数学工具，通过使用协方差矩阵来描述个体之间的遗传和环境相关性，提出了一种新的预测方法，即最佳线性无偏预测（Best
Linear Unbiased Prediction，BLUP）。 <span class="math display">\[
y = X \beta + Zu + e
\]</span> 其中: <span class="math display">\[
\begin{cases}
y:响应向量，观测值\\
\beta:固定效应向量\\
u:随机效应向量；u\sim N(0,G)\\
X \&amp; Z : （已知）关联矩阵\\
e: 残差向量；e\sim N(0,\Sigma)
\end{cases}
\]</span></p>
<p><span class="math display">\[
\begin{bmatrix}
X^T\Sigma^{-1}X &amp; X^T\Sigma^{-1}Z \\
Z^T\Sigma^{-1}X &amp; Z^T\Sigma^{-1}Z + G^{-1}
\end{bmatrix}
\begin{bmatrix}
\hat{\beta}\\
\hat{u}
\end{bmatrix}
=
\begin{bmatrix}
X^T\Sigma^{-1}y\\
Z^T\Sigma^{-1}y
\end{bmatrix}
\]</span></p>
<h4 id="基于系谱的mme模型pblup">基于系谱的MME模型PBLUP</h4>
<p>在动物模型中,<span
class="math inline">\(G^{-1}=A^{-1}\sigma_a^{-2}，\Sigma^{-1}=I_n\sigma_e^{-2}\)</span>，MME则可以表示为：
<span class="math display">\[
\begin{bmatrix}
X^TX &amp; X^TZ \\
Z^TX &amp; Z^TZ + \lambda A^{-1}
\end{bmatrix}
\begin{bmatrix}
\hat{\beta}\\
\hat{u}
\end{bmatrix}
=
\begin{bmatrix}
X^Ty\\
Z^Ty
\end{bmatrix}
\]</span> 其中，<span class="math inline">\(\lambda =
\frac{\sigma_e^2}{\sigma_a^2}
=
\frac{1-h^2}{h^2}\)</span>，则MME的解析式： <span
class="math display">\[
\begin{bmatrix}
\hat{\beta}\\
\hat{u}
\end{bmatrix}
=
\begin{bmatrix}
X^TX &amp; X^TZ \\
Z^TX &amp; Z^TZ + \lambda A^{-1}
\end{bmatrix}^{-1}
\begin{bmatrix}
X^Ty\\
Z^Ty
\end{bmatrix}
\]</span>
BLUP方法的建立提供了对个体遗传值的准确估计，帮助育种者选取优良个体进行育种；结合了统计学原理和遗传学知识，为育种决策提供科学依据；通过预测个体性状表现，为育种目标的实现提供重要参考；能够综合考虑遗传和环境因素的影响，为优化基因组组合提供指导。
总的来说，BLUP方法在育种和遗传改良中具有重要的作用和意义，为育种者提供了一种有效的工具和方法，帮助他们更好地理解和利用遗传变异，加速育种进程，提高作物、家畜和微生物的遗传水平和生产性能。</p>
<h4 id="基于基因组信息的mme模型gblup">基于基因组信息的MME模型GBLUP</h4>
<p>进入21世纪后，基因组学技术的兴起和发展，尤其是高通量基因测序技术的广泛应用。将个体基因组信息纳入模型与传统的家系信息和表型数据结合起来，用于估计个体的遗传值，通过建立包含基因组信息的线性模型，在实际育种应用最为广泛的不依赖系谱的GBLUP和结合系谱SSBLUP模型方法相比于传统的BLUP方法可以更准确地评估个体的遗传值，尤其是针对复杂性状和低遗传效应的性状。
GBLUP模型中，G矩阵的计算公式如下： <span
class="math inline">\(G=\frac{M^TM}{2\sum_{k=1}^m
p_k(1-p_k)}\)</span>,其中M为<span class="math inline">\(m \times
n\)</span>标准化基因型矩阵，<span
class="math inline">\(m\)</span>为标记个数，<span
class="math inline">\(n\)</span>为分型个体数；<span
class="math inline">\(p_k\)</span>为第<span
class="math inline">\(k\)</span>个位点最小等位基因频率。
MME拓展到GBLUP的解析式： <span class="math display">\[
\begin{bmatrix}
\hat{\beta}\\
\hat{u}
\end{bmatrix}
=
\begin{bmatrix}
X^TX &amp; X^TZ \\
Z^TX &amp; Z^TZ + \frac{\sigma_e^2}{\sigma_a^2} G^{-1}
\end{bmatrix}^{-1}
\begin{bmatrix}
X^Ty\\
Z^Ty
\end{bmatrix}
\]</span></p>
<h4
id="基于系谱和基因型整合的mme模型ssblup">基于系谱和基因型整合的MME模型SSBLUP</h4>
<p>SSBLUP模型中，H矩阵的计算公式如下： <span class="math display">\[
H=
\begin{bmatrix}
A_{11}+A_{12} A_{22}^{-1}(G_w-A_{22})A_{22}^{-1}A_{21} &amp;&amp;
A_{12}A_{22}^{-1}G_w\\
G_w A_{22}^{-1}A_{21} &amp;&amp; G_w
\end{bmatrix}
\]</span> 其中，<span
class="math inline">\(A_{11}\)</span>为未分型的个体间血缘关系矩阵，<span
class="math inline">\(A_{22}\)</span>为分型的个体间血缘关系矩阵，<span
class="math inline">\(G_w = (1-\alpha)G^{\ast}+ \alpha
A_{22}\)</span>，<span
class="math inline">\(G^{\ast}\)</span>为矫正后的基因组关系矩阵: <span
class="math display">\[
\begin{cases}
AvgI(diag(G)) \cdot a +b=Avg(diag(A_{22})) \\
AvgI(offdiag(G)) \cdot a +b=Avg(offdiag(A_{22}))
\end{cases}
\]</span> <span class="math inline">\(G^{\ast}=a + bA_{22}\)</span>。
<span class="math display">\[
H^{-1}= A^{-1} +
\begin{bmatrix}
0 &amp;&amp; 0\\
0 &amp;&amp; \begin{bmatrix}
(1-\alpha)G^{\ast} + \alpha A_{22}
\end{bmatrix}^{-1} - \omega A_{22}^{-1}
\end{bmatrix}
\]</span> MME拓展到SSBLUP的解析式： <span class="math display">\[
\begin{bmatrix}
\hat{\beta}\\
\hat{u}
\end{bmatrix}
=
\begin{bmatrix}
X^TX &amp; X^TZ \\
Z^TX &amp; Z^TZ + \frac{\sigma_e^2}{\sigma_a^2} H^{-1}
\end{bmatrix}^{-1}
\begin{bmatrix}
X^Ty\\
Z^Ty
\end{bmatrix}
\]</span>
育种工具在实践的过程中由最开始的BLUP进化到GBLUP再到整合SSBLUP模型，这其中有大量的理论、模型和算法工作得到不断地改进与升级。在基于此算法和模型实现软件工具也在不断地走向成熟，例如丹麦的DMU、英国的ASReml、美国的BLUPf90等。</p>
<h3 id="mme模型面临的挑战">MME模型面临的挑战</h3>
<p>随着基因组测序和基因芯片计算的进一步发展，基因分型成本的不断下降，育种群体中有基因分型的个体占比不断增加同时育种群体的基数也在不断壮大，关系矩阵逐渐由稀疏走向稠密，MME模型能够支撑的遗传评估迭代求<span
class="math inline">\(\sigma^2\)</span>的计算瓶颈渐渐凸显，具体的问题表现在这两点：其一，遗传评估计算时间过长，即使计算出所有个体估计育种值时，育种对象早已错过选择窗口期，失去了育种时效性；其二，所需计算资源过高，MME迭代过程中需存储超大规模矩阵，频繁内存存储交换，计算效率过低、伴随有内存溢出风险，导致计算失效。此时急需新的模型来解决此问题。
### 创新"HE+PCG"模型策略
HIBLUP的问世成功解决了此问题，HIBLUP首创基于V矩阵的“HE+PCG”策略，可完全避免遗传评估计算过程中的大矩阵求逆，且V矩阵的维度相比于MME方程更小。通过模拟UKB级别大数据（50万个体、100万标记）进行测试发现，HIBLUP采用的“HE+PCG”策略能够在1小时完成方差组分估计及育种值求解，其他软件需要长达数周甚至数月的时间。这样的突破让超大规模育种群的选择成为可能，在更多的遗传基因组合中，找到更加优秀的个体。
## 育种面临的挑战 ### 经营主体的困境
农业产品长周期、高风险、低利润决定了企业的资金储备、人才力量、抗风险能力往往相对较弱。农业的生物节律属性决定了其无法像工业品那样在极短时间生产-销售-再生产，让资金利用率最大化。基于保供、稳供、保民生的政策背景下，大宗农产品也很难获得高溢价。虽然农业企业为社会就业提供了大量的工作岗位，但在国家统计局每年公布的薪酬待遇中农业企业往往垫底，即使农企通过一些方式吸引到高质量人才加入，后续的研发资金不足和成长空间有限也会导致留不住人的现象发生，“引进人、留住人、用好人”问题也是大多数农企需要面对的考验。以上种种问题的存在导致农业企业普遍市场竞争力较弱，容易陷入同质化严重、产能过剩、低价竞争的局面。
### 育种工作的挑战
以往育种工作的开展需要投入极大的人力、物力、财力。企业经营者会基于效益、周期、风险衡量某项决策是否通过或推进某项事业是否落地执行。尽管取得育种“胜利的果实”很诱人，但长周期、高投入、高风险的育种方案很自然地被搁置在角落。在育种领域也存在着“蒙代尔三角”。
<img
src="/images/1710141732035-b842e66e-6a8d-4827-b8d6-4c7a1b9d9ae2.jpeg" />
以养猪业为例，在规模化猪企业决策中都会走向引进种猪的育种线路，再通过育种金字塔遗传传播分摊育种成本达到领先同行的育种优势。很遗憾的是，这种优势往往持续不了几年，核心种猪的优势遗传基因组合会在一代一代的选育中逐渐打乱甚至丢失，就像打麻将一样，刚开始一副天胡牌，交换了几圈后，牌面组合已经丧失优势，最好的方式就是重新洗牌，再来一局。育种同样如此！
引种、退化、再引种的困局其本质是不知道”育种牌“的规则。如何评估牌面价值（遗传评估）、如何利用规则累积自己的优势。而不是胡乱换牌（选配），每一次的取舍（选种)，都是价值最大化考量。练就熟悉规则的本领，还需长期定力坚持育种价值。
育种和麻将一样赢者通吃。从全球育种产业的发展来看，能够上桌的企业寥寥无几，各自都有自己的护城河，都在拼劲全力积累自己的”牌面“优势，争取在一轮又一轮竞争中依然坐在牌桌之上。
正因为育种“胜利的果实”诱人，同时挑战难度巨大。基于自身实力的多方考量，目前能够真正参与育种竞争都是头部集团化的大企业，对于中小企业或许只能望洋兴叹。</p>
<h3 id="育种改进之法">育种改进之法</h3>
<p>育种领先，更多的是所依赖的育种模式领先。就像汽车产业一样，传统老牌优势车企的领先是积累了百年发动机技术和变速箱技术等等技术的领先，但更换为新能源赛道后，把大家拉到同一起跑线上竞争，原有的先发优势反而成为了瞻前顾后的包袱，后起之秀轻装上阵专注赛道反而取得较大优势。传统优势育种企业的领先是积累了大量的遗传资源和遗传数据，基于系谱表型的BLUP改进策略的确帮助其取得较大遗传进展，在经济性状方面取得巨大优势。最明显的案例就是肉鸡的出栏速度、猪的造肉效率、奶牛的产奶量。经过理论和实践验证，基因组芯片技术对比传统的系谱表型技术的确能更快提高遗传进展。在目前刚刚起步基因组育种赛道上，再结合表型智能化采集，育种赛道会有所作为。
企业的问题、育种的问题、人才的问题这些问题的根源本质还是竞争力的问题。以养猪为例，猪企的竞争力
=（育种+环境（疾病）+营养）<span
class="math inline">\(\times\)</span>管理。在行业中精细化管理趋同、营养差距缩小、环境（疾病）意识升维、竞争越来越激烈的时代，盈利与亏本的基线指向育种方向越来越明显。打破育种的技术壁垒，人人可为，人人有为，让育种普惠的春风吹到行业的每一个角落，让育种成为人才培养、企业发展事业的重要抓手。
育种的破题之法还是核心技术的掌握、普及和推广。结合互联网+，将原本晦涩深奥的育种原理、方法和工具传播给一线育种相关人员，让育种看得懂、学得会、好操作、效果佳。将育种的门槛和壁垒降到普通人都能上手操作的地步，让广大中小企业能像头部集团一样能够参与进来一同竞争，提高整体的水平，进而提高整体竞争力。</p>
<h2 id="育种系统">育种系统</h2>
<p>我本人是动物遗传育种方向毕业的研究生，求学期间对育种的有种特别的期待，在到访过一些中小型农业企业后，他们面临的问题都集中在专业人才缺失、信息化能力较弱，人才培养成本较高。毕业后一直寻找破解之法，先后在集团总部育种部门从事育种规划工作，创业公司育种部门育种软件信息化工作。一直未曾离开育种这项事业。所以我本人既有育种一线管理工作经验也有育种软件编程经验。
这些经验让我的视野更加广阔，对育种的理解也更加深刻。在而立的年龄，总想干点什么，为这个行业做出点微薄的个人贡献。所以计划重点打造一套适配企业的开源系统，其次是分享育种实践工作中的一些实操技能。
开源系统的核心是育种架构。目前育种架构的核心模型和算法准备适配兼容BLUPf90和HIBLUP，后续有精力替换为自己所写的C++模型和算法，性能大概率比不上前两者，但好歹也独立自主了不是(
╯□╰ )。当然后续也会讲解如何自己手搓一个育种模型和算法。
无论基于何种模型的育种工具其最后都需要服务于实际的生产实践，在实践过程中不断优化迭代，使得工具的能力进一步强化，在实现开源系统过程中会有一些不太完善的地方，希望有大佬们能够多多指教，谢谢！
<img
src="/images/1709024845310-0d9e3f99-e230-4275-9c0d-cb2ec3c3cac5.jpeg" /></p>
]]></content>
      <tags>
        <tag>育种</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo遇见的问题（1）｜安装</title>
    <url>/2024/01/26/%E4%BD%BF%E7%94%A8hexo%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%881%EF%BC%89%EF%BD%9C%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本人梳理了一下安装hexo会遇见的问题一般会有以下的几个：</p>
<ol type="1">
<li>底层依赖问题</li>
<li>npm镜像源配置问题</li>
<li>github连接问题</li>
<li>主题切换问题</li>
</ol>
<span id="more"></span>
<h3 id="一底层依赖问题">一、底层依赖问题</h3>
<p>hexo是基于node.js开发而成的快速、简洁且高效的博客框架。电脑环境中需要提前安装好node.js。以下是2024年1月26日本人在<a
href="https://hexo.io/zh-cn/docs/">说明文档</a>中查找出的版本推荐：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Hexo 版本</th>
<th style="text-align: center;">最低版本 (Node.js 版本)</th>
<th style="text-align: left;">最高版本 (Node.js 版本)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">7.0+</td>
<td style="text-align: center;">14.0.0</td>
<td style="text-align: left;">latest</td>
</tr>
<tr class="even">
<td style="text-align: center;">6.2+</td>
<td style="text-align: center;">12.13.0</td>
<td style="text-align: left;">latest</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6.0+</td>
<td style="text-align: center;">12.13.0</td>
<td style="text-align: left;">18.5.0</td>
</tr>
<tr class="even">
<td style="text-align: center;">5.0+</td>
<td style="text-align: center;">10.13.0</td>
<td style="text-align: left;">12.0.0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4.1 - 4.2</td>
<td style="text-align: center;">8.10</td>
<td style="text-align: left;">10.0.0</td>
</tr>
<tr class="even">
<td style="text-align: center;">4.0</td>
<td style="text-align: center;">8.6</td>
<td style="text-align: left;">8.10.0</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3.3 - 3.9</td>
<td style="text-align: center;">6.9</td>
<td style="text-align: left;">8.0.0</td>
</tr>
<tr class="even">
<td style="text-align: center;">3.2 - 3.3</td>
<td style="text-align: center;">0.12</td>
<td style="text-align: left;">未知</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3.0 - 3.1</td>
<td style="text-align: center;">0.10 或 iojs</td>
<td style="text-align: left;">未知</td>
</tr>
<tr class="even">
<td style="text-align: center;">0.0.1 - 2.8</td>
<td style="text-align: center;">0.10</td>
<td style="text-align: left;">未知</td>
</tr>
</tbody>
</table>
<p>没有安装node.js的小伙伴提前官方的 <a
href="https://nodejs.org/zh-cn/download/">node下载地址</a>下载安装你想要的node.js版本。</p>
<p>检查电脑环境中的node.js版本。Mac、Win、Linux电脑都是在命令行工具中使用命令<code>node -v</code>查看电脑node.js版本，以下是Mac电脑实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">v16.20.0</span><br></pre></td></tr></table></figure>
<p>安装好node.js之后，即可使用 npm
安装==hexo==安装前选择一个文件夹<code>hexo-site</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd hexo-site</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>如果安装顺利，即可完成hexo的安装。</p>
<p>按照以上步骤避免了很多莫名其妙的依赖性错误坑，例如</p>
<ul>
<li>电脑环境低版本的node.js安装了高版本的hexo</li>
<li>电脑环境高版本的node.js安装了低版本的hexo</li>
</ul>
<p>这两种都不能顺利的完成hexo安装。即使安装了也会出现控制不了的意外事件的发生。</p>
<h3 id="二npm镜像源配置问题">二、npm镜像源配置问题</h3>
<p>大部分国内小伙伴在使用 npm
安装==hexo==时，会发现安装下载极慢，尝试很多次依然失败，更换下载源即可完成下载。</p>
<h4 id="临时使用"><strong>1. 临时使用</strong></h4>
<p>如果只是一次性使用，可以使用下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd hexo-site</span><br><span class="line">npm --registry https://registry.npmmirror.com install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h4 id="全局配置">2. 全局配置</h4>
<p>这种设置是全局的，以后每次都会自动读取已经设置好的源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 查询源</span><br><span class="line">npm config get registry</span><br><span class="line">// 更换国内源</span><br><span class="line">npm config set registry https://registry.npmmirror.com</span><br><span class="line">// 恢复官方源</span><br><span class="line">npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<p>再次,即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd hexo-site</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="三github连接问题">三、github连接问题</h3>
<h4 id="安装git">3.1 安装git</h4>
<p>请在<a
href="https://git-scm.com/download/">官网</a>下载并安装git。</p>
<figure>
<img src="images/image-20240126233359331.png"
alt="image-20240126233359331" />
<figcaption aria-hidden="true">image-20240126233359331</figcaption>
</figure>
<h4 id="配置github">3.2 配置github</h4>
<p>没有github账户，请前往官网注册。</p>
<h5 id="在-github-上创建仓库">3.2.1 在 Github 上创建仓库</h5>
<ul>
<li>新建一个名为: <a
href="https://link.zhihu.com/?target=http%3A//username.github.io">http://username.github.io</a>
的仓库(username 为您的 Github 用户名)</li>
<li>比如，如果您的 github 用户名是 test，那么您就新建名为 <a
href="https://link.zhihu.com/?target=http%3A//test.github.io">http://test.github.io</a>
的仓库（必须是您的用户名，其它名称无效），将来你的网站访问地址就是 <a
href="https://link.zhihu.com/?target=https%3A//test.github.io/">https://test.github.io</a>
了。由此可见，每一个 github
账户最多只能创建一个这样可以直接使用域名访问的仓库</li>
<li>注意事项: 注册的邮箱一定要验证，否则不会成功; 仓库名字必须是：<a
href="https://link.zhihu.com/?target=http%3A//username.github.io">http://username.github.io</a>，其中
username 是你的用户名;
仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久</li>
</ul>
<h5 id="配置-ssh-免密登录">3.2.2 配置 SSH 免密登录</h5>
<p>为什么要配置这个呢？因为您提交代码肯定要拥有您的 github
权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 ssh key
来解决本地和服务器的连接问题。具体设置方式信息和步骤搜索网络教程，在此不再赘述。</p>
<p><strong>注:</strong> 如果您已经配置过 SSH，可跳过此步骤</p>
<h5 id="测试连通性">3.2.3 测试连通性</h5>
<p>使用git配置github完成后，测试连通性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h5 id="配置git-用户和邮箱">3.2.4 配置git 用户和邮箱</h5>
<p>命令:
<code>git config --global user.name "your Github username"</code> //
注意是 username, 而非昵称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your Github username</span><br></pre></td></tr></table></figure>
<p>命令: <code>git config --global user.email "xxx@qq.com"</code> //
填写您的 github 注册邮箱</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;xxx@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>查看git配置信息<code>git config -l</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l</span><br><span class="line">credential.helper=osxkeychain</span><br><span class="line">init.defaultbranch=main</span><br><span class="line">user.name=your username  //此处会展示你的设置用户名</span><br><span class="line">user.email=your email address  //此处会展示你设置的邮箱</span><br></pre></td></tr></table></figure>
<p>至此，您已经成功配置好了 Github。</p>
<p>git配置好后，国内用户都会遇见访问github速度较慢或者无法访问问题。解决git无法连接<a
href="https://so.csdn.net/so/search?q=gitHub&amp;spm=1001.2101.3001.7020">gitHub</a>问题</p>
<h4 id="使用代理工具">3.3 使用代理工具</h4>
<p>有时候我们用代理工具，但git
依然无法pull，无法push，无法clone的问题。分析原因</p>
<p>从github上拉取某个仓库的代码，有HTTPS和SSH两种模式。</p>
<h5 id="https模式无法连接远程仓库">3.3.1 HTTPS模式无法连接远程仓库</h5>
<ol type="1">
<li>报错 "Failed to connect to github.com port 443"</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/PaddlePaddle/PaddleOCR.git</span><br><span class="line">Cloning into ‘Messaging’… </span><br><span class="line">fatal: unable to access ‘https://github.com/PaddlePaddle/PaddleOCR.git‘: Failed to connect to github.com port 443: Timed out</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>配置http代理</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>7890是端口号，要看自己电脑proxy
software的端口号</p>
<ol start="3" type="1">
<li>查看代理命令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>取消代理命令</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<h5 id="ssh模式无法连接远程仓库">3.3.2 SSH模式无法连接远程仓库</h5>
<ol type="1">
<li>报错 ssh: connect to host github.com port 22</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:PaddlePaddle/PaddleOCR.git </span><br><span class="line">Cloning into ...</span><br><span class="line">ssh: connect to host github.com port 22: Operation timed out</span><br><span class="line">fatal: Could not read from remote repository.</span><br></pre></td></tr></table></figure>
<p>经过git配置代理后，我的HTTPS模式已经可用了，但是SSH模式依然不行。</p>
<p>采用了<a
href="https://help.github.com/en/github/authenticating-to-github/using-ssh-over-the-https-port">git
官网</a>给的解决办法，使用 SSH 443端口</p>
<p>先测试可用性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure>
<p>编辑 ~/.ssh/config 文件，如果没有config就新建一个config</p>
<p>在config中添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure>
<p>在测试联通性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure>
<p>很多人的误区：即使clash开了全局代理，浏览器能上油管等网站，git默认还是不走代理的，所以会遇到超时等情况。按照以上配置好之后，目前git的各项操作都畅通无阻。</p>
<h4 id="没有使用代理工具">3.4 没有使用代理工具</h4>
<p>关闭VPN代理工具后，依然无法使用正常使用github。这时网络联通的情况下，可能是因为git工具配置了代理导致的。</p>
<h5 id="取消git代理设置">3.4.1 取消git代理设置</h5>
<p>使用命令取消</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<p>查看设置<code>git config -l</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>
<h3 id="四主题切换问题">四、主题切换问题</h3>
<p>git主题切换的问题，主要是配置根目录_config.yml文件和主题目录__config.yml文件不太匹配导致的。</p>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
